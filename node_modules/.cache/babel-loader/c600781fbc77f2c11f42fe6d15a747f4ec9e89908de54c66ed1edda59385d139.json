{"ast":null,"code":"const express = require('express');\nconst db = require('./db');\nconst router = express.Router();\n\n// Registro de usuário\nrouter.post('/register', (req, res) => {\n  const {\n    name,\n    email\n  } = req.body;\n  const date = new Date().toISOString();\n  db.run(`INSERT INTO users (name, email) VALUES (?, ?)`, [name, email], function (err) {\n    if (err) {\n      return res.status(500).json({\n        error: err.message\n      });\n    }\n    const userId = this.lastID;\n    db.run(`INSERT INTO consent_history (user_id, date) VALUES (?, ?)`, [userId, date], err => {\n      if (err) {\n        return res.status(500).json({\n          error: err.message\n        });\n      }\n      res.status(201).json({\n        id: userId,\n        name,\n        email\n      });\n    });\n  });\n});\n\n// Obter dados do usuário\nrouter.get('/users/:id', (req, res) => {\n  const userId = req.params.id;\n  db.get(`SELECT * FROM users WHERE id = ?`, [userId], (err, row) => {\n    if (err) {\n      return res.status(500).json({\n        error: err.message\n      });\n    }\n    res.json(row);\n  });\n});\n\n// Atualizar dados do usuário\nrouter.put('/users/:id', (req, res) => {\n  const userId = req.params.id;\n  const {\n    name,\n    email\n  } = req.body;\n  db.run(`UPDATE users SET name = ?, email = ? WHERE id = ?`, [name, email, userId], err => {\n    if (err) {\n      return res.status(500).json({\n        error: err.message\n      });\n    }\n    res.status(200).json({\n      id: userId,\n      name,\n      email\n    });\n  });\n});\n\n// Excluir usuário\nrouter.delete('/users/:id', (req, res) => {\n  const userId = req.params.id;\n  db.run(`DELETE FROM users WHERE id = ?`, [userId], err => {\n    if (err) {\n      return res.status(500).json({\n        error: err.message\n      });\n    }\n    db.run(`DELETE FROM consent_history WHERE user_id = ?`, [userId], err => {\n      if (err) {\n        return res.status(500).json({\n          error: err.message\n        });\n      }\n      db.run(`DELETE FROM notifications WHERE user_id = ?`, [userId], err => {\n        if (err) {\n          return res.status(500).json({\n            error: err.message\n          });\n        }\n        res.status(200).json({\n          message: 'Conta excluída com sucesso'\n        });\n      });\n    });\n  });\n});\n\n// Obter histórico de consentimento\nrouter.get('/users/:id/consent-history', (req, res) => {\n  const userId = req.params.id;\n  db.all(`SELECT * FROM consent_history WHERE user_id = ?`, [userId], (err, rows) => {\n    if (err) {\n      return res.status(500).json({\n        error: err.message\n      });\n    }\n    res.json(rows);\n  });\n});\n\n// Obter notificações\nrouter.get('/users/:id/notifications', (req, res) => {\n  const userId = req.params.id;\n  db.all(`SELECT * FROM notifications WHERE user_id = ?`, [userId], (err, rows) => {\n    if (err) {\n      return res.status(500).json({\n        error: err.message\n      });\n    }\n    res.json(rows);\n  });\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","db","router","Router","post","req","res","name","email","body","date","Date","toISOString","run","err","status","json","error","message","userId","lastID","id","get","params","row","put","delete","all","rows","module","exports"],"sources":["C:/Users/Lucas/Documents/GitHub/privacy-policy-app/src/routes.js"],"sourcesContent":["const express = require('express');\r\nconst db = require('./db');\r\nconst router = express.Router();\r\n\r\n// Registro de usuário\r\nrouter.post('/register', (req, res) => {\r\n  const { name, email } = req.body;\r\n  const date = new Date().toISOString();\r\n  db.run(`INSERT INTO users (name, email) VALUES (?, ?)`, [name, email], function(err) {\r\n    if (err) {\r\n      return res.status(500).json({ error: err.message });\r\n    }\r\n    const userId = this.lastID;\r\n    db.run(`INSERT INTO consent_history (user_id, date) VALUES (?, ?)`, [userId, date], (err) => {\r\n      if (err) {\r\n        return res.status(500).json({ error: err.message });\r\n      }\r\n      res.status(201).json({ id: userId, name, email });\r\n    });\r\n  });\r\n});\r\n\r\n// Obter dados do usuário\r\nrouter.get('/users/:id', (req, res) => {\r\n  const userId = req.params.id;\r\n  db.get(`SELECT * FROM users WHERE id = ?`, [userId], (err, row) => {\r\n    if (err) {\r\n      return res.status(500).json({ error: err.message });\r\n    }\r\n    res.json(row);\r\n  });\r\n});\r\n\r\n// Atualizar dados do usuário\r\nrouter.put('/users/:id', (req, res) => {\r\n  const userId = req.params.id;\r\n  const { name, email } = req.body;\r\n  db.run(`UPDATE users SET name = ?, email = ? WHERE id = ?`, [name, email, userId], (err) => {\r\n    if (err) {\r\n      return res.status(500).json({ error: err.message });\r\n    }\r\n    res.status(200).json({ id: userId, name, email });\r\n  });\r\n});\r\n\r\n// Excluir usuário\r\nrouter.delete('/users/:id', (req, res) => {\r\n  const userId = req.params.id;\r\n  db.run(`DELETE FROM users WHERE id = ?`, [userId], (err) => {\r\n    if (err) {\r\n      return res.status(500).json({ error: err.message });\r\n    }\r\n    db.run(`DELETE FROM consent_history WHERE user_id = ?`, [userId], (err) => {\r\n      if (err) {\r\n        return res.status(500).json({ error: err.message });\r\n      }\r\n      db.run(`DELETE FROM notifications WHERE user_id = ?`, [userId], (err) => {\r\n        if (err) {\r\n          return res.status(500).json({ error: err.message });\r\n        }\r\n        res.status(200).json({ message: 'Conta excluída com sucesso' });\r\n      });\r\n    });\r\n  });\r\n});\r\n\r\n// Obter histórico de consentimento\r\nrouter.get('/users/:id/consent-history', (req, res) => {\r\n  const userId = req.params.id;\r\n  db.all(`SELECT * FROM consent_history WHERE user_id = ?`, [userId], (err, rows) => {\r\n    if (err) {\r\n      return res.status(500).json({ error: err.message });\r\n    }\r\n    res.json(rows);\r\n  });\r\n});\r\n\r\n// Obter notificações\r\nrouter.get('/users/:id/notifications', (req, res) => {\r\n  const userId = req.params.id;\r\n  db.all(`SELECT * FROM notifications WHERE user_id = ?`, [userId], (err, rows) => {\r\n    if (err) {\r\n      return res.status(500).json({ error: err.message });\r\n    }\r\n    res.json(rows);\r\n  });\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}